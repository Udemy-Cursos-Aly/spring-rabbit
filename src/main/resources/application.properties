spring.application.name=proposta-app

# Conexão e configuração do banco de dados
spring.datasource.url=jdbc:postgresql://localhost:5432/propostadb
spring.datasource.password=postgres
spring.datasource.username=postgres
spring.jpa.hibernate.ddl-auto=create-drop

# Conexão e configuração do RabbitMQ da nossa aplicação
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Exchange utilizada no rabbitMQ
rabbit.mq.exchange=proposta-pendente.ex
rabbit.mq.queue.pp.ms.credito=proposta-pendente.ms-analise-credito
rabbit.mq.queue.pp.ms.notificacao=proposta-pendente.ms-analise-credito
rabbit.mq.queue.pc.ms.proposta=proposta-pendente.ms-analise-credito
rabbit.mq.queue.pc.ms.notificacao=proposta-pendente.ms-analise-credito

# Imagem da aplicação front-end utilizada no curso
# docker run -d -p 80:80 --name proposta-web-container matheuspieropan/proposta-web

# Imagem do RabbitMQ
# docker run -d -p 5672:5672 -p 15672:15672 --name my-rabbit rabbitmq:3-management